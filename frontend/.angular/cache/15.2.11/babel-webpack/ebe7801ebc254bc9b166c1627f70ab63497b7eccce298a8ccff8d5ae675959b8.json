{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/dance.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CourseUpdateComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 13);\n    i0.ɵɵtext(2, \"Le titre est requis.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CourseUpdateComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 13);\n    i0.ɵɵtext(2, \"Le contenu est requis.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CourseUpdateComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 13);\n    i0.ɵɵtext(2, \"Le nom de l'instructeur est requis.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CourseUpdateComponent_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const school_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", school_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", school_r5.name, \" \");\n  }\n}\nfunction CourseUpdateComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"small\", 13);\n    i0.ɵɵtext(2, \"Veuillez s\\u00E9lectionner une \\u00E9cole de danse.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class CourseUpdateComponent {\n  constructor(fb, danceService, router, route) {\n    this.fb = fb;\n    this.danceService = danceService;\n    this.router = router;\n    this.route = route;\n    this.danceSchools = [];\n    this.courseForm = this.fb.group({\n      title: ['', Validators.required],\n      contenu: ['', Validators.required],\n      instructor: ['', Validators.required],\n      danceSchoolId: [null, Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.courseId = +this.route.snapshot.paramMap.get('id'); // Récupérer l'ID du cours\n    this.loadDanceSchools();\n    this.loadCourse();\n  }\n  loadDanceSchools() {\n    this.danceService.getAllDanceSchools().subscribe({\n      next: data => {\n        this.danceSchools = data;\n      },\n      error: err => {\n        console.error('Erreur lors de la récupération des écoles de danse', err);\n      }\n    });\n  }\n  loadCourse() {\n    this.danceService.getCourseById(this.courseId).subscribe({\n      next: course => {\n        this.courseForm.patchValue({\n          title: course.title,\n          contenu: course.contenu,\n          instructor: course.instructor,\n          danceSchoolId: course.danceSchool.id // Associer l'école de danse\n        });\n      },\n\n      error: err => {\n        console.error('Erreur lors de la récupération du cours', err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.courseForm.valid) {\n      const updatedCourse = {\n        id: this.courseId,\n        title: this.courseForm.value.title,\n        contenu: this.courseForm.value.contenu,\n        instructor: this.courseForm.value.instructor,\n        danceSchool: {\n          id: this.courseForm.value.danceSchoolId\n        }\n      };\n      this.danceService.updateCourse(this.courseId, updatedCourse).subscribe({\n        next: () => {\n          this.router.navigate(['crud/course-list']); // Redirection vers la liste des cours\n        },\n\n        error: err => {\n          console.error('Erreur lors de la mise à jour du cours', err);\n        }\n      });\n    } else {\n      console.error('Le formulaire n\\'est pas valide');\n    }\n  }\n  static {\n    this.ɵfac = function CourseUpdateComponent_Factory(t) {\n      return new (t || CourseUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DanceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CourseUpdateComponent,\n      selectors: [[\"app-course-update\"]],\n      decls: 28,\n      vars: 8,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"title\"], [\"id\", \"title\", \"formControlName\", \"title\"], [4, \"ngIf\"], [\"for\", \"contenu\"], [\"id\", \"contenu\", \"formControlName\", \"contenu\"], [\"for\", \"instructor\"], [\"id\", \"instructor\", \"formControlName\", \"instructor\"], [\"for\", \"danceSchoolId\"], [\"id\", \"danceSchoolId\", \"formControlName\", \"danceSchoolId\"], [\"disabled\", \"\", \"selected\", \"\", 3, \"value\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"error\"], [3, \"value\"]],\n      template: function CourseUpdateComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Modifier le Cours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function CourseUpdateComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(3, \"div\")(4, \"label\", 1);\n          i0.ɵɵtext(5, \"Titre du cours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"input\", 2);\n          i0.ɵɵtemplate(7, CourseUpdateComponent_div_7_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\")(9, \"label\", 4);\n          i0.ɵɵtext(10, \"Contenu\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"textarea\", 5);\n          i0.ɵɵtemplate(12, CourseUpdateComponent_div_12_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\")(14, \"label\", 6);\n          i0.ɵɵtext(15, \"Instructeur\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 7);\n          i0.ɵɵtemplate(17, CourseUpdateComponent_div_17_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\")(19, \"label\", 8);\n          i0.ɵɵtext(20, \"\\u00C9cole de danse\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"select\", 9)(22, \"option\", 10);\n          i0.ɵɵtext(23, \"Choisir une \\u00E9cole\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(24, CourseUpdateComponent_option_24_Template, 2, 2, \"option\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(25, CourseUpdateComponent_div_25_Template, 3, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 12);\n          i0.ɵɵtext(27, \"Mettre \\u00E0 jour le cours\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_6_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.courseForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.courseForm.get(\"title\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.courseForm.get(\"title\")) == null ? null : tmp_1_0.touched) || ((tmp_1_0 = ctx.courseForm.get(\"title\")) == null ? null : tmp_1_0.dirty)));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.courseForm.get(\"contenu\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.courseForm.get(\"contenu\")) == null ? null : tmp_2_0.touched) || ((tmp_2_0 = ctx.courseForm.get(\"contenu\")) == null ? null : tmp_2_0.dirty)));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.courseForm.get(\"instructor\")) == null ? null : tmp_3_0.invalid) && (((tmp_3_0 = ctx.courseForm.get(\"instructor\")) == null ? null : tmp_3_0.touched) || ((tmp_3_0 = ctx.courseForm.get(\"instructor\")) == null ? null : tmp_3_0.dirty)));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"value\", null);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.danceSchools);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = ctx.courseForm.get(\"danceSchoolId\")) == null ? null : tmp_6_0.invalid) && (((tmp_6_0 = ctx.courseForm.get(\"danceSchoolId\")) == null ? null : tmp_6_0.touched) || ((tmp_6_0 = ctx.courseForm.get(\"danceSchoolId\")) == null ? null : tmp_6_0.dirty)));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.courseForm.invalid);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","CourseUpdateComponent","constructor","fb","danceService","router","route","courseForm","group","title","required","contenu","instructor","danceSchoolId","ngOnInit","courseId","snapshot","paramMap","get","loadDanceSchools","loadCourse","getAllDanceSchools","subscribe","next","data","danceSchools","error","err","console","getCourseById","course","patchValue","danceSchool","id","onSubmit","valid","updatedCourse","value","updateCourse","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\course\\course-update\\course-update.component.ts","C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\course\\course-update\\course-update.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DanceService } from '../../../services/dance.service';\nimport { Course } from '../../../models/course.model';\nimport { DanceSchool } from '../../../models/dance-school.model';\n\n@Component({\n  selector: 'app-course-update',\n  templateUrl: './course-update.component.html',\n  styleUrls: ['./course-update.component.css']\n})\nexport class CourseUpdateComponent implements OnInit {\n  courseForm: FormGroup;\n  danceSchools: DanceSchool[] = [];\n  courseId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private danceService: DanceService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.courseForm = this.fb.group({\n      title: ['', Validators.required],\n      contenu: ['', Validators.required],\n      instructor: ['', Validators.required],\n      danceSchoolId: [null, Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.courseId = +this.route.snapshot.paramMap.get('id')!; // Récupérer l'ID du cours\n    this.loadDanceSchools();\n    this.loadCourse();\n  }\n\n  loadDanceSchools(): void {\n    this.danceService.getAllDanceSchools().subscribe({\n      next: (data) => {\n        this.danceSchools = data;\n      },\n      error: (err) => {\n        console.error('Erreur lors de la récupération des écoles de danse', err);\n      }\n    });\n  }\n\n  loadCourse(): void {\n    this.danceService.getCourseById(this.courseId).subscribe({\n      next: (course) => {\n        this.courseForm.patchValue({\n          title: course.title,\n          contenu: course.contenu,\n          instructor: course.instructor,\n          danceSchoolId: course.danceSchool.id // Associer l'école de danse\n        });\n      },\n      error: (err) => {\n        console.error('Erreur lors de la récupération du cours', err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.courseForm.valid) {\n      const updatedCourse: Course = {\n        id: this.courseId,\n        title: this.courseForm.value.title,\n        contenu: this.courseForm.value.contenu,\n        instructor: this.courseForm.value.instructor,\n        danceSchool: { id: this.courseForm.value.danceSchoolId } as DanceSchool\n      };\n\n      this.danceService.updateCourse(this.courseId, updatedCourse).subscribe({\n        next: () => {\n          this.router.navigate(['crud/course-list']); // Redirection vers la liste des cours\n        },\n        error: (err) => {\n          console.error('Erreur lors de la mise à jour du cours', err);\n        }\n      });\n    } else {\n      console.error('Le formulaire n\\'est pas valide');\n    }\n  }\n}","<h2>Modifier le Cours</h2>\n<form [formGroup]=\"courseForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"title\">Titre du cours</label>\n    <input id=\"title\" formControlName=\"title\" />\n    <div *ngIf=\"courseForm.get('title')?.invalid && (courseForm.get('title')?.touched || courseForm.get('title')?.dirty)\">\n      <small class=\"error\">Le titre est requis.</small>\n    </div>\n  </div>\n\n  <div>\n    <label for=\"contenu\">Contenu</label>\n    <textarea id=\"contenu\" formControlName=\"contenu\"></textarea>\n    <div *ngIf=\"courseForm.get('contenu')?.invalid && (courseForm.get('contenu')?.touched || courseForm.get('contenu')?.dirty)\">\n      <small class=\"error\">Le contenu est requis.</small>\n    </div>\n  </div>\n\n  <div>\n    <label for=\"instructor\">Instructeur</label>\n    <input id=\"instructor\" formControlName=\"instructor\" />\n    <div *ngIf=\"courseForm.get('instructor')?.invalid && (courseForm.get('instructor')?.touched || courseForm.get('instructor')?.dirty)\">\n      <small class=\"error\">Le nom de l'instructeur est requis.</small>\n    </div>\n  </div>\n\n  <div>\n    <label for=\"danceSchoolId\">École de danse</label>\n    <select id=\"danceSchoolId\" formControlName=\"danceSchoolId\">\n      <option [value]=\"null\" disabled selected>Choisir une école</option>\n      <option *ngFor=\"let school of danceSchools\" [value]=\"school.id\">\n        {{ school.name }}\n      </option>\n    </select>\n    <div *ngIf=\"courseForm.get('danceSchoolId')?.invalid && (courseForm.get('danceSchoolId')?.touched || courseForm.get('danceSchoolId')?.dirty)\">\n      <small class=\"error\">Veuillez sélectionner une école de danse.</small>\n    </div>\n  </div>\n\n  <button type=\"submit\" [disabled]=\"courseForm.invalid\">Mettre à jour le cours</button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}