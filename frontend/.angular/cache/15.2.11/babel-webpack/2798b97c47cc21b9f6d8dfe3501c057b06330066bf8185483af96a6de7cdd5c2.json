{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/dance.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nfunction CourseListComponent_tr_14_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CourseListComponent_tr_14_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const course_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.deleteCourse(course_r1.id));\n    });\n    i0.ɵɵtext(1, \"Supprimer\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a1) {\n  return [\"/crud/course-update\", a1];\n};\nfunction CourseListComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtemplate(8, CourseListComponent_tr_14_button_8_Template, 2, 0, \"button\", 1);\n    i0.ɵɵelementStart(9, \"a\", 2);\n    i0.ɵɵtext(10, \"\\u00C9diter\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const course_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(course_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(course_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(course_r1.instructor);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", course_r1.id !== null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(5, _c0, course_r1.id));\n  }\n}\nexport class CourseListComponent {\n  constructor(danceService) {\n    this.danceService = danceService;\n    this.courses = [];\n    this.danceSchools = new Map(); // Pour stocker les écoles de danse par ID\n  }\n\n  ngOnInit() {\n    this.loadCourses();\n  }\n  loadCourses() {\n    this.danceService.getAllCourses().subscribe(data => {\n      this.courses = data;\n      this.loadDanceSchools(); // Charger les écoles de danse après avoir récupéré les cours\n    }, error => {\n      console.error('Erreur lors du chargement des cours', error);\n    });\n  }\n  loadDanceSchools() {\n    this.courses.forEach(course => {\n      if (course.danceSchoolId && !this.danceSchools.has(course.danceSchoolId)) {\n        this.danceService.getDanceSchoolById(course.danceSchoolId).subscribe(danceSchool => {\n          this.danceSchools.set(course.danceSchoolId, danceSchool);\n        }, error => {\n          console.error(`Erreur lors du chargement de l'école de danse pour le cours ${course.id}`, error);\n        });\n      }\n    });\n  }\n  deleteCourse(id) {\n    if (confirm('Êtes-vous sûr de vouloir supprimer ce cours ?')) {\n      this.danceService.deleteCourse(id).subscribe(() => {\n        this.loadCourses(); // Recharge la liste après la suppression\n      }, error => {\n        console.error('Erreur lors de la suppression du cours', error);\n      });\n    }\n  }\n  getDanceSchoolName(danceSchoolId) {\n    const danceSchool = this.danceSchools.get(danceSchoolId);\n    return danceSchool ? danceSchool.name : 'Non spécifiée'; // Retourne le nom de l'école ou 'Non spécifiée'\n  }\n\n  static {\n    this.ɵfac = function CourseListComponent_Factory(t) {\n      return new (t || CourseListComponent)(i0.ɵɵdirectiveInject(i1.DanceService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CourseListComponent,\n      selectors: [[\"app-course-list\"]],\n      decls: 15,\n      vars: 1,\n      consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\", 4, \"ngIf\"], [3, \"routerLink\"], [3, \"click\"]],\n      template: function CourseListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Liste des Cours\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"table\")(3, \"thead\")(4, \"tr\")(5, \"th\");\n          i0.ɵɵtext(6, \"ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"th\");\n          i0.ɵɵtext(8, \"Titre\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"th\");\n          i0.ɵɵtext(10, \"Instructeur\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"th\");\n          i0.ɵɵtext(12, \"Actions\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tbody\");\n          i0.ɵɵtemplate(14, CourseListComponent_tr_14_Template, 11, 7, \"tr\", 0);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"ngForOf\", ctx.courses);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.RouterLink],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","CourseListComponent","constructor","danceService","Map","ngOnInit","loadCourses","getAllCourses","subscribe","data","courses","loadDanceSchools","error","console","forEach","course","danceSchoolId","danceSchools","has","getDanceSchoolById","danceSchool","set","id","deleteCourse","confirm","getDanceSchoolName","get","name","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\course\\course-list\\course-list.component.html","C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\course\\course-list\\course-list.component.ts"],"sourcesContent":["<h2>Liste des Cours</h2>\n<table>\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th>Titre</th>\n      <th>Instructeur</th>\n      <th>Actions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let course of courses\">\n      <td>{{ course.id }}</td>\n      <td>{{ course.title }}</td>\n      <td>{{ course.instructor }}</td>\n      <td>\n        <button *ngIf=\"course.id !== null\" (click)=\"deleteCourse(course.id)\">Supprimer</button>\n        <a [routerLink]=\"['/crud/course-update', course.id]\">Éditer</a>\n      </td>\n    </tr>\n  </tbody>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { Course } from '../../../models/course.model';\nimport { DanceService } from '../../../services/dance.service';\nimport { DanceSchool } from '../../../models/dance-school.model';\n\n@Component({\n  selector: 'app-course-list',\n  templateUrl: './course-list.component.html',\n  styleUrls: ['./course-list.component.css']\n})\nexport class CourseListComponent implements OnInit {\n  courses: Course[] = [];\n  danceSchools: Map<number, DanceSchool> = new Map(); // Pour stocker les écoles de danse par ID\n\n  constructor(private danceService: DanceService) {}\n\n  ngOnInit(): void {\n    this.loadCourses();\n  }\n\n  loadCourses(): void {\n    this.danceService.getAllCourses().subscribe(\n      (data: Course[]) => {\n        this.courses = data;\n        this.loadDanceSchools(); // Charger les écoles de danse après avoir récupéré les cours\n      },\n      (error) => {\n        console.error('Erreur lors du chargement des cours', error);\n      }\n    );\n  }\n\n  loadDanceSchools(): void {\n    this.courses.forEach(course => {\n      if (course.danceSchoolId && !this.danceSchools.has(course.danceSchoolId)) {\n        this.danceService.getDanceSchoolById(course.danceSchoolId).subscribe(\n          (danceSchool: DanceSchool) => {\n            this.danceSchools.set(course.danceSchoolId, danceSchool);\n          },\n          (error) => {\n            console.error(`Erreur lors du chargement de l'école de danse pour le cours ${course.id}`, error);\n          }\n        );\n      }\n    });\n  }\n\n  deleteCourse(id: number): void {\n    if (confirm('Êtes-vous sûr de vouloir supprimer ce cours ?')) {\n      this.danceService.deleteCourse(id).subscribe(\n        () => {\n          this.loadCourses(); // Recharge la liste après la suppression\n        },\n        (error) => {\n          console.error('Erreur lors de la suppression du cours', error);\n        }\n      );\n    }\n  }\n\n  getDanceSchoolName(danceSchoolId: number): string {\n    const danceSchool = this.danceSchools.get(danceSchoolId);\n    return danceSchool ? danceSchool.name : 'Non spécifiée'; // Retourne le nom de l'école ou 'Non spécifiée'\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}