{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/dance.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SchoolPostComponent_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r1.name, \" \");\n  }\n}\nexport class SchoolPostComponent {\n  constructor(formBuilder, danceService, router) {\n    this.formBuilder = formBuilder;\n    this.danceService = danceService;\n    this.router = router;\n    this.danceCategories = [];\n  }\n  ngOnInit() {\n    // Initialiser le formulaire réactif\n    this.schoolForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      localisation: ['', Validators.required],\n      openday: ['', Validators.required],\n      closeday: ['', Validators.required],\n      opentime: ['', Validators.required],\n      closetime: ['', Validators.required],\n      danceCategoryId: ['', Validators.required] // Pour la catégorie de danse\n    });\n    // Charger les catégories de danse disponibles\n    this.danceService.getAllDanceCategories().subscribe(categories => {\n      this.danceCategories = categories;\n    }, error => {\n      console.error('Erreur lors du chargement des catégories de danse', error);\n    });\n  }\n  // Méthode pour gérer l'événement change sur le select\n  onCategoryChange(event) {\n    const selectElement = event.target; // Spécifier le type de l'élément cible\n    this.selectedCategoryId = +selectElement.value; // Convertir en nombre\n  }\n  // Méthode pour soumettre le formulaire\n  onSubmit() {\n    if (this.schoolForm.valid) {\n      const schoolData = {\n        id: 0,\n        name: this.schoolForm.value.name,\n        localisation: this.schoolForm.value.localisation,\n        openday: this.schoolForm.value.openday,\n        closeday: this.schoolForm.value.closeday,\n        opentime: this.schoolForm.value.opentime,\n        closetime: this.schoolForm.value.closetime,\n        danceCategoryId: this.selectedCategoryId // Associer la catégorie de danse sélectionnée\n      };\n      // Créer une nouvelle école de danse\n      this.danceService.createDanceSchool(schoolData).subscribe(() => {\n        console.log('Ecole de danse créée avec succès');\n        this.router.navigate(['/crud/school-list']); // Rediriger vers la liste des écoles\n      }, error => {\n        console.error('Erreur lors de la création de l\\'école de danse', error);\n      });\n    }\n  }\n  static {\n    this.ɵfac = function SchoolPostComponent_Factory(t) {\n      return new (t || SchoolPostComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DanceService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SchoolPostComponent,\n      selectors: [[\"app-school-post\"]],\n      decls: 32,\n      vars: 3,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"formControlName\", \"name\"], [\"for\", \"localisation\"], [\"id\", \"localisation\", \"formControlName\", \"localisation\"], [\"for\", \"openday\"], [\"id\", \"openday\", \"formControlName\", \"openday\"], [\"for\", \"closeday\"], [\"id\", \"closeday\", \"formControlName\", \"closeday\"], [\"for\", \"opentime\"], [\"id\", \"opentime\", \"formControlName\", \"opentime\"], [\"for\", \"closetime\"], [\"id\", \"closetime\", \"formControlName\", \"closetime\"], [\"for\", \"danceCategoryId\"], [\"formControlName\", \"danceCategoryId\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"value\"]],\n      template: function SchoolPostComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function SchoolPostComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Nom de l'\\u00E9cole\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Localisation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\")(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Jour d'ouverture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\")(14, \"label\", 7);\n          i0.ɵɵtext(15, \"Jour de fermeture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"div\")(18, \"label\", 9);\n          i0.ɵɵtext(19, \"Heure d'ouverture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\")(22, \"label\", 11);\n          i0.ɵɵtext(23, \"Heure de fermeture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"div\")(26, \"label\", 13);\n          i0.ɵɵtext(27, \"Cat\\u00E9gorie de danse\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"select\", 14);\n          i0.ɵɵlistener(\"change\", function SchoolPostComponent_Template_select_change_28_listener($event) {\n            return ctx.selectedCategoryId = $event.target.value;\n          });\n          i0.ɵɵtemplate(29, SchoolPostComponent_option_29_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(30, \"button\", 16);\n          i0.ɵɵtext(31, \"Cr\\u00E9er l'\\u00E9cole\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.schoolForm);\n          i0.ɵɵadvance(29);\n          i0.ɵɵproperty(\"ngForOf\", ctx.danceCategories);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.schoolForm.invalid);\n        }\n      },\n      dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","SchoolPostComponent","constructor","formBuilder","danceService","router","ngOnInit","schoolForm","group","name","required","localisation","openday","closeday","opentime","closetime","danceCategoryId","getAllDanceCategories","subscribe","categories","danceCategories","error","console","onCategoryChange","event","selectElement","target","selectedCategoryId","value","onSubmit","valid","schoolData","id","createDanceSchool","log","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\dance-school\\school-post\\school-post.component.ts","C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\dance-school\\school-post\\school-post.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DanceCategory } from '../../../models/dance-category.model';\nimport { DanceSchool } from '../../../models/dance-school.model';\nimport { DanceService } from '../../../services/dance.service';\n\n@Component({\n  selector: 'app-school-post',\n  templateUrl: './school-post.component.html',\n  styleUrls: ['./school-post.component.css']\n})\nexport class SchoolPostComponent implements OnInit {\n  schoolForm: FormGroup;\n  danceCategories: DanceCategory[] = [];\n  selectedCategoryId: number;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private danceService: DanceService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // Initialiser le formulaire réactif\n    this.schoolForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      localisation: ['', Validators.required],\n      openday: ['', Validators.required],\n      closeday: ['', Validators.required],\n      opentime: ['', Validators.required],\n      closetime: ['', Validators.required],\n      danceCategoryId: ['', Validators.required]  // Pour la catégorie de danse\n    });\n\n    // Charger les catégories de danse disponibles\n    this.danceService.getAllDanceCategories().subscribe(\n      (categories: DanceCategory[]) => {\n        this.danceCategories = categories;\n      },\n      (error) => {\n        console.error('Erreur lors du chargement des catégories de danse', error);\n      }\n    );\n  }\n\n  // Méthode pour gérer l'événement change sur le select\n  onCategoryChange(event: Event): void {\n    const selectElement = event.target as HTMLSelectElement;  // Spécifier le type de l'élément cible\n    this.selectedCategoryId = +selectElement.value;  // Convertir en nombre\n  }\n\n  // Méthode pour soumettre le formulaire\n  onSubmit(): void {\n    if (this.schoolForm.valid) {\n      const schoolData: DanceSchool = {\n        id: 0,  // ID est 0 pour une nouvelle création\n        name: this.schoolForm.value.name,\n        localisation: this.schoolForm.value.localisation,\n        openday: this.schoolForm.value.openday,\n        closeday: this.schoolForm.value.closeday,\n        opentime: this.schoolForm.value.opentime,\n        closetime: this.schoolForm.value.closetime,\n        danceCategoryId: this.selectedCategoryId  // Associer la catégorie de danse sélectionnée\n      };\n\n      // Créer une nouvelle école de danse\n      this.danceService.createDanceSchool(schoolData).subscribe(\n        () => {\n          console.log('Ecole de danse créée avec succès');\n          this.router.navigate(['/crud/school-list']);  // Rediriger vers la liste des écoles\n        },\n        (error) => {\n          console.error('Erreur lors de la création de l\\'école de danse', error);\n        }\n      );\n    }\n  }\n}\n","<form [formGroup]=\"schoolForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <label for=\"name\">Nom de l'école</label>\n      <input id=\"name\" formControlName=\"name\" />\n    </div>\n    <div>\n      <label for=\"localisation\">Localisation</label>\n      <input id=\"localisation\" formControlName=\"localisation\" />\n    </div>\n    <div>\n      <label for=\"openday\">Jour d'ouverture</label>\n      <input id=\"openday\" formControlName=\"openday\" />\n    </div>\n    <div>\n      <label for=\"closeday\">Jour de fermeture</label>\n      <input id=\"closeday\" formControlName=\"closeday\" />\n    </div>\n    <div>\n      <label for=\"opentime\">Heure d'ouverture</label>\n      <input id=\"opentime\" formControlName=\"opentime\" />\n    </div>\n    <div>\n      <label for=\"closetime\">Heure de fermeture</label>\n      <input id=\"closetime\" formControlName=\"closetime\" />\n    </div>\n  \n    <!-- Sélectionner une catégorie de danse -->\n    <div>\n      <label for=\"danceCategoryId\">Catégorie de danse</label>\n      <select formControlName=\"danceCategoryId\" (change)=\"selectedCategoryId = $event.target.value\">\n        <option *ngFor=\"let category of danceCategories\" [value]=\"category.id\">\n          {{ category.name }}\n        </option>\n      </select>\n    </div>\n  \n    <button type=\"submit\" [disabled]=\"schoolForm.invalid\">Créer l'école</button>\n  </form>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}