{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { DanceCategory } from '../../../models/dance-category.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../services/dance.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SchoolPostComponent_option_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r1.name, \" \");\n  }\n}\nexport class SchoolPostComponent {\n  constructor(fb, danceService, router) {\n    this.fb = fb;\n    this.danceService = danceService;\n    this.router = router;\n    this.danceCategories = []; // Liste des catégories disponibles\n    // Initialisation du formulaire avec un champ danceCategoryId\n    this.schoolForm = this.fb.group({\n      name: ['', Validators.required],\n      localisation: ['', Validators.required],\n      openday: ['', Validators.required],\n      closeday: ['', Validators.required],\n      opentime: ['', Validators.required],\n      closetime: ['', Validators.required],\n      danceCategoryId: [null, Validators.required] // Champ pour la catégorie\n    });\n  }\n\n  ngOnInit() {\n    // Récupérer les catégories de danse disponibles\n    this.danceService.getAllDanceCategories().subscribe({\n      next: categories => {\n        this.danceCategories = categories;\n      },\n      error: err => {\n        console.error('Erreur lors de la récupération des catégories', err);\n      }\n    });\n  }\n  onReturn() {\n    this.router.navigate(['crud/school-list']); // Redirection vers la liste des écoles\n  }\n\n  onSubmit() {\n    if (this.schoolForm.valid) {\n      // Récupérer l'ID de la catégorie de danse sélectionnée\n      const danceCategoryId = this.schoolForm.value.danceCategoryId;\n      // Créer une instance de DanceCategory avec l'ID et un nom par défaut\n      const danceCategory = new DanceCategory(danceCategoryId, ''); // Nom vide ou par défaut\n      // Création de l'objet DanceSchool à partir du formulaire\n      const newSchool = {\n        ...this.schoolForm.value,\n        danceCategory: danceCategory // Associer la catégorie de danse\n      };\n      // Envoi au backend via le service\n      this.danceService.createDanceSchool(newSchool).subscribe({\n        next: () => {\n          this.router.navigate(['crud/school-list']); // Redirection vers la liste des écoles\n        },\n\n        error: err => {\n          console.error('Erreur lors de la création de l\\'école', err);\n        }\n      });\n    } else {\n      console.error('Le formulaire n\\'est pas valide');\n    }\n  }\n  static {\n    this.ɵfac = function SchoolPostComponent_Factory(t) {\n      return new (t || SchoolPostComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DanceService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SchoolPostComponent,\n      selectors: [[\"app-school-post\"]],\n      decls: 34,\n      vars: 4,\n      consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"formControlName\", \"name\"], [\"for\", \"localisation\"], [\"id\", \"localisation\", \"formControlName\", \"localisation\"], [\"for\", \"openday\"], [\"id\", \"openday\", \"formControlName\", \"openday\"], [\"for\", \"closeday\"], [\"id\", \"closeday\", \"formControlName\", \"closeday\"], [\"for\", \"opentime\"], [\"id\", \"opentime\", \"formControlName\", \"opentime\"], [\"for\", \"closetime\"], [\"id\", \"closetime\", \"formControlName\", \"closetime\"], [\"for\", \"danceCategoryId\"], [\"id\", \"danceCategoryId\", \"formControlName\", \"danceCategoryId\"], [\"disabled\", \"\", \"selected\", \"\", 3, \"value\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"value\"]],\n      template: function SchoolPostComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function SchoolPostComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Nom de l'\\u00E9cole\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\")(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Localisation\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\")(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Jour d'ouverture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\")(14, \"label\", 7);\n          i0.ɵɵtext(15, \"Jour de fermeture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"div\")(18, \"label\", 9);\n          i0.ɵɵtext(19, \"Heure d'ouverture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\")(22, \"label\", 11);\n          i0.ɵɵtext(23, \"Heure de fermeture\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(24, \"input\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"div\")(26, \"label\", 13);\n          i0.ɵɵtext(27, \"Cat\\u00E9gorie de danse\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"select\", 14)(29, \"option\", 15);\n          i0.ɵɵtext(30, \"Choisir une cat\\u00E9gorie\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(31, SchoolPostComponent_option_31_Template, 2, 2, \"option\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(32, \"button\", 17);\n          i0.ɵɵtext(33, \"Cr\\u00E9er l'\\u00E9cole\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.schoolForm);\n          i0.ɵɵadvance(29);\n          i0.ɵɵproperty(\"value\", null);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.danceCategories);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.schoolForm.invalid);\n        }\n      },\n      dependencies: [i4.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","DanceCategory","i0","SchoolPostComponent","constructor","fb","danceService","router","schoolForm","group","name","required","localisation","openday","closeday","opentime","closetime","danceCategoryId","ngOnInit","getAllDanceCategories","subscribe","next","categories","danceCategories","error","err","console","onReturn","navigate","onSubmit","valid","value","danceCategory","newSchool","createDanceSchool","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\dance-school\\school-post\\school-post.component.ts","C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\dance-school\\school-post\\school-post.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { DanceCategory } from '../../../models/dance-category.model';\nimport { DanceSchool } from '../../../models/dance-school.model';\nimport { DanceService } from '../../../services/dance.service';\n\n@Component({\n  selector: 'app-school-post',\n  templateUrl: './school-post.component.html',\n  styleUrls: ['./school-post.component.css']\n})\nexport class SchoolPostComponent implements OnInit {\n  schoolForm: FormGroup;\n  danceCategories: DanceCategory[] = []; // Liste des catégories disponibles\n\n  constructor(\n    private fb: FormBuilder,\n    private danceService: DanceService,\n    private router: Router\n  ) {\n    // Initialisation du formulaire avec un champ danceCategoryId\n    this.schoolForm = this.fb.group({\n      name: ['', Validators.required],\n      localisation: ['', Validators.required],\n      openday: ['', Validators.required],\n      closeday: ['', Validators.required],\n      opentime: ['', Validators.required],\n      closetime: ['', Validators.required],\n      danceCategoryId: [null, Validators.required] // Champ pour la catégorie\n    });\n  }\n\n  ngOnInit(): void {\n    // Récupérer les catégories de danse disponibles\n    this.danceService.getAllDanceCategories().subscribe({\n      next: (categories) => {\n        this.danceCategories = categories;\n      },\n      error: (err) => {\n        console.error('Erreur lors de la récupération des catégories', err);\n      }\n    });\n  }\n  onReturn(): void {\n    this.router.navigate(['crud/school-list']); // Redirection vers la liste des écoles\n  }\n\n  onSubmit(): void {\n    if (this.schoolForm.valid) {\n        // Récupérer l'ID de la catégorie de danse sélectionnée\n        const danceCategoryId = this.schoolForm.value.danceCategoryId;\n\n        // Créer une instance de DanceCategory avec l'ID et un nom par défaut\n        const danceCategory = new DanceCategory(danceCategoryId, ''); // Nom vide ou par défaut\n\n        // Création de l'objet DanceSchool à partir du formulaire\n        const newSchool: DanceSchool = {\n            ...this.schoolForm.value,\n            danceCategory: danceCategory // Associer la catégorie de danse\n        };\n\n        // Envoi au backend via le service\n        this.danceService.createDanceSchool(newSchool).subscribe({\n            next: () => {\n                this.router.navigate(['crud/school-list']); // Redirection vers la liste des écoles\n            },\n            error: (err) => {\n                console.error('Erreur lors de la création de l\\'école', err);\n            }\n        });\n    } else {\n        console.error('Le formulaire n\\'est pas valide');\n    }\n}\n}\n","<form [formGroup]=\"schoolForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"name\">Nom de l'école</label>\n    <input id=\"name\" formControlName=\"name\" />\n  </div>\n  <div>\n    <label for=\"localisation\">Localisation</label>\n    <input id=\"localisation\" formControlName=\"localisation\" />\n  </div>\n  <div>\n    <label for=\"openday\">Jour d'ouverture</label>\n    <input id=\"openday\" formControlName=\"openday\" />\n  </div>\n  <div>\n    <label for=\"closeday\">Jour de fermeture</label>\n    <input id=\"closeday\" formControlName=\"closeday\" />\n  </div>\n  <div>\n    <label for=\"opentime\">Heure d'ouverture</label>\n    <input id=\"opentime\" formControlName=\"opentime\" />\n  </div>\n  <div>\n    <label for=\"closetime\">Heure de fermeture</label>\n    <input id=\"closetime\" formControlName=\"closetime\" />\n  </div>\n\n  <!-- Sélection de la catégorie de danse -->\n  <div>\n    <label for=\"danceCategoryId\">Catégorie de danse</label>\n    <select id=\"danceCategoryId\" formControlName=\"danceCategoryId\">\n      <option [value]=\"null\" disabled selected>Choisir une catégorie</option>\n      <option *ngFor=\"let category of danceCategories\" [value]=\"category.id\">\n        {{ category.name }}\n      </option>\n    </select>\n  </div>\n\n  <button type=\"submit\" [disabled]=\"schoolForm.invalid\">Créer l'école</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}