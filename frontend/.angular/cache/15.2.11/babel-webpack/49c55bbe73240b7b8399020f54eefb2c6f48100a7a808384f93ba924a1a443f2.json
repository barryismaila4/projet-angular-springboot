{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CoursePostComponent = class CoursePostComponent {\n  constructor(fb, danceService, router) {\n    this.fb = fb;\n    this.danceService = danceService;\n    this.router = router;\n    this.danceSchools = []; // Liste des écoles de danse\n    this.courseForm = this.fb.group({\n      title: ['', Validators.required],\n      contenu: ['', Validators.required],\n      instructor: ['', Validators.required],\n      danceSchoolId: [null, Validators.required] // Champ pour l'école de danse\n    });\n  }\n\n  ngOnInit() {\n    this.loadDanceSchools(); // Charger les écoles de danse disponibles\n  }\n\n  loadDanceSchools() {\n    this.danceService.getAllDanceSchools().subscribe({\n      next: data => {\n        this.danceSchools = data; // Remplir la liste des écoles de danse\n      },\n\n      error: err => {\n        console.error('Erreur lors de la récupération des écoles de danse', err);\n      }\n    });\n  }\n  onSubmit() {\n    if (this.courseForm.valid) {\n      const newCourse = {\n        id: null,\n        title: this.courseForm.value.title,\n        contenu: this.courseForm.value.contenu,\n        instructor: this.courseForm.value.instructor,\n        danceSchool: {\n          id: this.courseForm.value.danceSchoolId\n        } // Associer l'école de danse\n      };\n\n      this.danceService.createCourse(newCourse).subscribe({\n        next: () => {\n          this.router.navigate(['crud/course-list']); // Redirection vers la liste des cours\n        },\n\n        error: err => {\n          console.error('Erreur lors de la création du cours', err);\n        }\n      });\n    } else {\n      console.error('Le formulaire n\\'est pas valide');\n    }\n  }\n};\nCoursePostComponent = __decorate([Component({\n  selector: 'app-course-post',\n  templateUrl: './course-post.component.html',\n  styleUrls: ['./course-post.component.css']\n})], CoursePostComponent);\nexport { CoursePostComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAI9BC,YACUC,EAAe,EACfC,YAA0B,EAC1BC,MAAc;IAFd,OAAE,GAAFF,EAAE;IACF,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IALhB,iBAAY,GAAkB,EAAE,CAAC,CAAC;IAOhC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC9BC,KAAK,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MAChCC,OAAO,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MAClCE,UAAU,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ,CAAC;MACrCG,aAAa,EAAE,CAAC,IAAI,EAAEZ,UAAU,CAACS,QAAQ,CAAC,CAAC;KAC5C,CAAC;EACJ;;EAEAI,QAAQ;IACN,IAAI,CAACC,gBAAgB,EAAE,CAAC,CAAC;EAC3B;;EAEAA,gBAAgB;IACd,IAAI,CAACV,YAAY,CAACW,kBAAkB,EAAE,CAACC,SAAS,CAAC;MAC/CC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,YAAY,GAAGD,IAAI,CAAC,CAAC;MAC5B,CAAC;;MACDE,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,oDAAoD,EAAEC,GAAG,CAAC;MAC1E;KACD,CAAC;EACJ;EAEAE,QAAQ;IACN,IAAI,IAAI,CAACjB,UAAU,CAACkB,KAAK,EAAE;MACzB,MAAMC,SAAS,GAAW;QACxBC,EAAE,EAAE,IAAI;QACRlB,KAAK,EAAE,IAAI,CAACF,UAAU,CAACqB,KAAK,CAACnB,KAAK;QAClCE,OAAO,EAAE,IAAI,CAACJ,UAAU,CAACqB,KAAK,CAACjB,OAAO;QACtCC,UAAU,EAAE,IAAI,CAACL,UAAU,CAACqB,KAAK,CAAChB,UAAU;QAC5CiB,WAAW,EAAE;UAAEF,EAAE,EAAE,IAAI,CAACpB,UAAU,CAACqB,KAAK,CAACf;QAAa,CAAiB,CAAC;OACzE;;MAED,IAAI,CAACR,YAAY,CAACyB,YAAY,CAACJ,SAAS,CAAC,CAACT,SAAS,CAAC;QAClDC,IAAI,EAAE,MAAK;UACT,IAAI,CAACZ,MAAM,CAACyB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC;;QACDV,KAAK,EAAGC,GAAG,IAAI;UACbC,OAAO,CAACF,KAAK,CAAC,qCAAqC,EAAEC,GAAG,CAAC;QAC3D;OACD,CAAC;KACH,MAAM;MACLC,OAAO,CAACF,KAAK,CAAC,iCAAiC,CAAC;;EAEpD;CACD;AAtDYnB,mBAAmB,eAL/BF,SAAS,CAAC;EACTgC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWhC,mBAAmB,CAsD/B;SAtDYA,mBAAmB","names":["Component","Validators","CoursePostComponent","constructor","fb","danceService","router","courseForm","group","title","required","contenu","instructor","danceSchoolId","ngOnInit","loadDanceSchools","getAllDanceSchools","subscribe","next","data","danceSchools","error","err","console","onSubmit","valid","newCourse","id","value","danceSchool","createCourse","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\htismaila4\\Desktop\\Spring-Angular\\dancefrontend\\src\\app\\src\\app\\backofficecrud\\course\\course-post\\course-post.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Course } from '../../../models/course.model';\nimport { DanceSchool } from '../../../models/dance-school.model'; // Assurez-vous que le chemin est correct\nimport { DanceService } from '../../../services/dance.service';\n\n@Component({\n  selector: 'app-course-post',\n  templateUrl: './course-post.component.html',\n  styleUrls: ['./course-post.component.css']\n})\nexport class CoursePostComponent implements OnInit {\n  courseForm: FormGroup;\n  danceSchools: DanceSchool[] = []; // Liste des écoles de danse\n\n  constructor(\n    private fb: FormBuilder,\n    private danceService: DanceService,\n    private router: Router\n  ) {\n    this.courseForm = this.fb.group({\n      title: ['', Validators.required],\n      contenu: ['', Validators.required],\n      instructor: ['', Validators.required],\n      danceSchoolId: [null, Validators.required] // Champ pour l'école de danse\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadDanceSchools(); // Charger les écoles de danse disponibles\n  }\n\n  loadDanceSchools(): void {\n    this.danceService.getAllDanceSchools().subscribe({\n      next: (data) => {\n        this.danceSchools = data; // Remplir la liste des écoles de danse\n      },\n      error: (err) => {\n        console.error('Erreur lors de la récupération des écoles de danse', err);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.courseForm.valid) {\n      const newCourse: Course = {\n        id: null, // L'ID sera généré par le backend\n        title: this.courseForm.value.title,\n        contenu: this.courseForm.value.contenu,\n        instructor: this.courseForm.value.instructor,\n        danceSchool: { id: this.courseForm.value.danceSchoolId } as DanceSchool // Associer l'école de danse\n      };\n\n      this.danceService.createCourse(newCourse).subscribe({\n        next: () => {\n          this.router.navigate(['crud/course-list']); // Redirection vers la liste des cours\n        },\n        error: (err) => {\n          console.error('Erreur lors de la création du cours', err);\n        }\n      });\n    } else {\n      console.error('Le formulaire n\\'est pas valide');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}